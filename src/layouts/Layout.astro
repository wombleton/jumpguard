---
export interface Props {
	title: string;
}

const { title } = Astro.props;

// Define navigation order and titles
const navOrder = [
	{ slug: 'ship-crew', title: 'The Ship Crew' },
	{ slug: 'space-turn', title: 'Space Turn' },
	{ slug: 'ship-turn', title: 'Ship Turn' },
	{ slug: 'obstacles', title: 'Obstacles' },
	{ slug: 'conflicts', title: 'Conflicts' },
	{ slug: 'conditions', title: 'Conditions' },
	{ slug: 'abilities-skills', title: 'Abilities and Skills' },
	{ slug: 'traits', title: 'Traits' }
];

// Get all pages for navigation
const pages = await Astro.glob('../pages/*.{astro,md}');
const pageMap = new Map();

pages.forEach(page => {
	const url = page.url || page.file?.split('/pages')[1]?.replace(/\.(astro|md)$/, '') || '';
	const cleanUrl = url.startsWith('/') ? url : `/${url}`;
	const slug = cleanUrl.replace('/', '');
	if (slug) pageMap.set(slug, cleanUrl);
});

// Build navigation items in the specified order
const navItems = navOrder
	.filter(item => pageMap.has(item.slug))
	.map(item => ({
		url: pageMap.get(item.slug),
		title: item.title
	}));
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="A hack of MouseGuard for the Mongoose Traveller setting." />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<link rel="stylesheet" href="/src/styles/global.css" />
	</head>
	<body>
		<div class="stars" id="starfield"></div>
		<div class="nebula"></div>
		
		<div class="jump-ring"></div>
		<div class="jump-ring"></div>
		<div class="jump-ring"></div>
		
		<div class="layout-container">
			<nav>
				<h1><a href="/">Jump Guard</a></h1>
				<ul>
					<li><a href="/">Overview</a></li>
					{navItems.map(item => (
						<li><a href={item.url}>{item.title}</a></li>
					))}
				</ul>
			</nav>
			<main>
				<slot />
			</main>
		</div>

		<script>
			// Create starfield
			function createStars() {
				const starfield = document.getElementById('starfield');
				if (!starfield) return;
				
				const numStars = 150;
				
				for (let i = 0; i < numStars; i++) {
					const star = document.createElement('div');
					star.className = 'star';
					
					const size = Math.random() * 3 + 1;
					star.style.width = size + 'px';
					star.style.height = size + 'px';
					star.style.left = Math.random() * 100 + '%';
					star.style.top = Math.random() * 100 + '%';
					star.style.animationDelay = Math.random() * 3 + 's';
					
					starfield.appendChild(star);
				}
			}
			
			// Create floating particles
			function createParticles() {
				const body = document.body;
				const numParticles = 20;
				
				for (let i = 0; i < numParticles; i++) {
					const particle = document.createElement('div');
					particle.className = 'particle';
					
					const size = Math.random() * 4 + 2;
					particle.style.width = size + 'px';
					particle.style.height = size + 'px';
					particle.style.left = Math.random() * 100 + '%';
					particle.style.top = Math.random() * 100 + '%';
					particle.style.animationDelay = Math.random() * 6 + 's';
					particle.style.animationDuration = (Math.random() * 4 + 4) + 's';
					
					body.appendChild(particle);
				}
			}
			
			// Initialize effects
			document.addEventListener('DOMContentLoaded', () => {
				createStars();
				createParticles();
			});
		</script>
	</body>
</html>